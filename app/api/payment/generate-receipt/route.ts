import { NextResponse } from "next/server";
import PDFDocument from "pdfkit";
import { Buffer } from "buffer";

interface PaymentDetails {
  tx_ref: string;
  amount: string;
  currency: string;
  payment_date: string;
  status: string;
  first_name: string;
  last_name: string;
  email: string;
}

const validatePaymentDetails = (data: any): data is PaymentDetails => {
  const requiredFields = [
    "tx_ref",
    "amount",
    "currency",
    "payment_date",
    "status",
    "first_name",
    "last_name",
    "email",
  ];
  return requiredFields.every((field) => data[field] && typeof data[field] === "string");
};

export async function POST(request: Request) {
  try {
    const paymentDetails = await request.json();

    if (!validatePaymentDetails(paymentDetails)) {
      console.error('Invalid payment details:', paymentDetails);
      return NextResponse.json(
        { error: "Invalid or missing payment details", code: 'INVALID_DATA' },
        { status: 400 }
      );
    }

    const pdfBuffer = await new Promise<Buffer>((resolve, reject) => {
      const doc = new PDFDocument({ margin: 50 });
      const buffers: Buffer[] = [];

      doc.on("data", (buffer: Buffer) => buffers.push(buffer));
      doc.on("end", () => resolve(Buffer.concat(buffers)));
      doc.on("error", (err) => reject(err));

      // Header
      doc
        .fontSize(24)
        .fillColor('#1e40af')
        .text("Payment Receipt", { align: "center" });
      doc.moveDown(0.5);
      doc
        .lineWidth(2)
        .moveTo(50, doc.y)
        .lineTo(550, doc.y)
        .strokeColor('#1e40af')
        .stroke();
      doc.moveDown(1);

      // Placeholder for logo (replace with actual image in production)
      doc
        .fontSize(12)
        .fillColor('#374151')
        .text("[Your Logo Here]", { align: "left" });
      doc.moveDown(1);

      // Receipt Details
      doc
        .fontSize(14)
        .fillColor('#111827')
        .text("Transaction Details", { underline: true });
      doc.moveDown(0.5);
      doc
        .fontSize(12)
        .fillColor('#374151')
        .text(`Transaction Reference: ${paymentDetails.tx_ref}`);
      doc.text(`Amount: ${paymentDetails.amount} ${paymentDetails.currency}`);
      doc.text(
        `Date: ${new Date(paymentDetails.payment_date).toLocaleDateString()}`
      );
      doc.text(`Status: ${paymentDetails.status}`);
      doc.moveDown(1);

      // Customer Details
      doc
        .fontSize(14)
        .fillColor('#111827')
        .text("Customer Details", { underline: true });
      doc.moveDown(0.5);
      doc
        .fontSize(12)
        .fillColor('#374151')
        .text(`Customer: ${paymentDetails.first_name} ${paymentDetails.last_name}`);
      doc.text(`Email: ${paymentDetails.email}`);

      // Footer
      doc.moveDown(2);
      doc
        .fontSize(10)
        .fillColor('#6b7280')
        .text("Generated by Your Cinema App", { align: "center" });

      doc.end();
    });

    return new NextResponse(pdfBuffer, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="receipt-${paymentDetails.tx_ref}.pdf"`,
      },
    });
  } catch (error) {
    console.error("Error generating PDF:", error);
    return NextResponse.json(
      {
        error: "Failed to generate PDF",
        message: error instanceof Error ? error.message : "Unknown error",
        code: 'PDF_GENERATION_FAILED',
      },
      { status: 500 }
    );
  }
}